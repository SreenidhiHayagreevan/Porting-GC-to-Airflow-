# -*- coding: utf-8 -*-
"""Airflow

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_vUUVnZJ9mS5eA8E7ZbRdM7tVfJTfrIB
"""

# -*- coding: utf-8 -*-
from airflow import DAG
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.models import Variable
from airflow.decorators import task
import requests
from datetime import datetime

def return_snowflake_conn():
    """Establish a Snowflake connection using the SnowflakeHook."""
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')
    return hook.get_conn().cursor()

@task
def extract(api_key):
    """Extract stock price data from Alpha Vantage API."""
    url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=ISRG&apikey={api_key}&outputsize=full"
    res = requests.get(url)
    res_json = res.json()

    # Extract last 90 days of data
    results = []
    for d in res_json.get("Time Series (Daily)", {}):
        daily_info = res_json["Time Series (Daily)"][d]
        daily_info['6. date'] = d
        results.append(daily_info)

    return results[-90:]

@task
def transform(results):
    """Transform extracted data into the format suitable for loading into Snowflake."""
    transformed_data = []
    for r in results:
        transformed_data.append({
            'open': r['1. open'].replace("'", "''"),
            'high': r['2. high'].replace("'", "''"),
            'low': r['3. low'].replace("'", "''"),
            'close': r['4. close'].replace("'", "''"),
            'volume': r['5. volume'].replace("'", "''"),
            'date': r['6. date'].replace("'", "''"),
            'symbol': 'ISRG'
        })
    return transformed_data

@task
def load(records, target_table):
    """Load transformed data into Snowflake."""
    cur = return_snowflake_conn()

    try:
        cur.execute("BEGIN")
        cur.execute(f"""CREATE OR REPLACE TABLE {target_table} (
                open DECIMAL(10, 4) NOT NULL,
                high DECIMAL(10, 4) NOT NULL,
                low DECIMAL(10, 4) NOT NULL,
                close DECIMAL(10, 4) NOT NULL,
                volume BIGINT NOT NULL,
                date DATE NOT NULL,
                symbol VARCHAR(10) NOT NULL,
                PRIMARY KEY (symbol, date)
            )""")

        for r in records:
            sql = f"INSERT INTO {target_table} (open, high, low, close, volume, date, symbol) VALUES " \
                  f"('{r['open']}', '{r['high']}', '{r['low']}', '{r['close']}', '{r['volume']}', '{r['date']}', '{r['symbol']}')"
            cur.execute(sql)
        cur.execute("COMMIT")
    except Exception as e:
        cur.execute("ROLLBACK")
        print(f"Error during load: {e}")
        raise

@task
def check_idempotency(records, target_table):
    """Check for idempotency by counting records before and after load."""
    cur = return_snowflake_conn()

    # Count existing records in the target table
    cur.execute(f"SELECT COUNT(*) FROM {target_table}")
    initial_count = cur.fetchone()[0]

    # Load the new records
    load(records, target_table)

    # Count records after loading
    cur.execute(f"SELECT COUNT(*) FROM {target_table}")
    final_count = cur.fetchone()[0]

    # Check if the number of records changed
    if final_count - initial_count == len(records):
        print("Idempotency check passed: New records were inserted.")
    else:
        print("Warning: Idempotency check failed: Some records may have already existed.")

with DAG(
    dag_id='etl_flow_realtime_stock_price',
    description='ETL Pipeline from AlphaVantage to Snowflake with Idempotency Check',
    start_date=datetime(2024, 10, 6),
    catchup=False,
    tags=['ETL'],
    schedule_interval='30 15 * * *',  # Adjust to your preferred schedule
) as dag:
    api_key = Variable.get("vantage_api_key")  # Ensure this variable is set in Airflow
    target_table = "dev.raw_data.alphavantage_stockprice"

    output = extract(api_key)
    transformed_output = transform(output)
    load_output = load(transformed_output, target_table)
    idempotency_check = check_idempotency(transformed_output, target_table)

    # Define task dependencies
    output >> transformed_output >> load_output >> idempotency_check